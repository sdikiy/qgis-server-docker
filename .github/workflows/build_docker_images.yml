name: Auto build QGIS server Docker images

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  UBUNTU_DIST: 'focal'

jobs:
  build-nightly:
    runs-on: ubuntu-latest
    name: build nightly
    steps:
      - uses: actions/checkout@v2
      
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          
      - id: build
        name: building ubuntu
        run: |
          docker build -t opengisch/qgis-server:nightly -f Dockerfile --build-arg repo=ubuntu-nightly .
          echo "# docker images" && sudo docker images

      - id: run
        name: run ubuntu
        run: |
          echo "# docker run -d -v $(pwd)/test/data:/io/data -p 8010:80 --name qgis-server opengisch/qgis-server:nightly" && \
          docker run -d -v $(pwd)/test/data:/io/data -p 8010:80 --name qgis-server opengisch/qgis-server:nightly
          echo "# docker exec -i qgis-server dpkg -l qgis-server" && \
          docker exec -i qgis-server dpkg -l qgis-server
          echo "# sleep 5" && \
          sleep 5
          echo "# curl -s 'http://localhost:8010/ogc/test_project?service=WMS&request=GetCapabilities'" && \
          curl -s 'http://localhost:8010/ogc/test_project?service=WMS&request=GetCapabilities'
          # docker push opengisch/qgis-server:nightly

  testing-ubuntu:
    runs-on: ubuntu-latest
    name: testing ubuntu
    steps:
      - uses: actions/checkout@v2
      - id: testing
        name: testing ubuntu
        run: |
          docker build -t opengisch/qgis-server .
          docker run -d -v $(pwd)/test/data:/io/data -p 8010:80 --name qgis-server opengisch/qgis-server
          docker exec -i qgis-server dpkg -l qgis-server
          sleep 5
          curl -s 'http://localhost:8010/ogc/test_project?service=WMS&request=GetCapabilities' | grep -ivq exception

  determinejob:
    runs-on: ubuntu-latest
    name: determine versions to update
    outputs:
      update_stable: ${{ steps.determine.outputs.update_stable }}
      qgis_stable: ${{ steps.determine.outputs.qgis_stable }}
      update_ltr: ${{ steps.determine.outputs.update_ltr }}
      qgis_ltr: ${{ steps.determine.outputs.qgis_ltr }}
    steps:
      - uses: actions/checkout@v2

      - id: python_deps
        run: pip3 install packaging

      - id: determine
        name: determine QGIS and Docker versions
        run : |
          DOCKER=$(./scripts/get_docker_image_version.py)
          QGIS=$(./scripts/get_ubuntu_qgis_package_version.py -d ${UBUNTU_DIST})

          DOCKER_STABLE=$(echo "${DOCKER}" | jq ".stable")
          DOCKER_LTR=$(echo "${DOCKER}" | jq ".ltr")
          QGIS_STABLE=$(echo "${QGIS}" | jq ".stable")
          QGIS_LTR=$(echo "${QGIS}" | jq ".ltr")

          echo "Existing stable docker: ${DOCKER_STABLE}"
          echo "Available stable QGIS: ${QGIS_STABLE}"
          UPDATE_STABLE=$(python3 -c "from packaging import version; print(1 if version.parse(${DOCKER_STABLE}) < version.parse(${QGIS_STABLE}) else 0)")
          if [[ ${UPDATE_STABLE} == 1 ]]; then
            echo "--> stable will be updated"
          else
            echo "--> stable is up to date"
          fi
          echo "Existing LTR docker: ${DOCKER_LTR}"
          echo "Available LTR QGIS: ${QGIS_LTR}"
          UPDATE_LTR=$(python3 -c "from packaging import version; print(1 if version.parse(${DOCKER_LTR}) < version.parse(${QGIS_LTR}) else 0)")
          if [[ ${UPDATE_LTR} == 1 ]]; then
            echo "--> LTR will be updated"
          else
            echo "--> LTR is up to date"
          fi

          # echo output for github worflows
          echo "::set-output name=update_stable::${UPDATE_STABLE}"
          echo "::set-output name=update_ltr::${UPDATE_LTR}"
          echo "::set-output name=qgis_stable::${QGIS_STABLE//\"/}"
          echo "::set-output name=qgis_ltr::${QGIS_LTR//\"/}"


  build-ubuntu-stable:
    runs-on: ubuntu-latest
    needs: [determinejob, testing-ubuntu]
    if: needs.determinejob.outputs.update_stable == 1 || github.event_name == 'push'
    steps:
      - uses: actions/checkout@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - id: build
        name: build ubuntu stable image
        env:
          DOCKER_USERNAME: ${{ secrets.docker_username }}
          DOCKER_PASSWORD: ${{ secrets.docker_password }}
        run: ./scripts/build-push-docker.sh stable ${{needs.determinejob.outputs.qgis_stable}} ${UBUNTU_DIST}

  build-ubuntu-ltr:
    runs-on: ubuntu-latest
    needs: [determinejob, testing-ubuntu]
    if: needs.determinejob.outputs.update_ltr == 1 || github.event_name == 'push'
    steps:
      - uses: actions/checkout@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - id: build
        name: build ubuntu LTR image
        env:
          DOCKER_USERNAME: ${{ secrets.docker_username }}
          DOCKER_PASSWORD: ${{ secrets.docker_password }}
        run: ./scripts/build-push-docker.sh ltr ${{needs.determinejob.outputs.qgis_ltr}} ${UBUNTU_DIST}
